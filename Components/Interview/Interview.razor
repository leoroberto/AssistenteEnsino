@page "/interview"
@rendermode InteractiveServer

@using AssistenteDeEnsino.Components.Interview.Entities
@using AssistenteDeEnsino.Services.Markdown
@using AssistenteDeEnsino.Services.Ollama
@using AssistenteDeEnsino.Services.OpenAI
@using Microsoft.AspNetCore.Components.Web

@inject ParameterService ParameterService
@inject IMarkdownService _markdownService
@inject IOllamaService _OllamaService

<style>
    .message-user {
        max-width: 70%;
    }

    .message-ai {
        max-width: 70%;
    }

    .container-custom {
        height: 94vh !important;
    }

    .chat-history {
        height: 70vh;
        overflow-y: auto;
    }
</style>

<div class="container-fluid container-custom">
    <div class="row h-100">

        <div class="col-lg-4 col-md-12 d-flex flex-column">
            <div class="chat-history flex-grow-1 mb-3" style="overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                @foreach (var message in Messages)
                {
                if (message.IsUser)
                {
                <div class="d-flex justify-content-end mb-2">
                    <div class="message-user bg-primary text-white p-2 rounded">
                        @((MarkupString)_markdownService.ConvertToHtml(message.Text))
                    </div>
                    <img src="/images/avatar-user.png" alt="Você" class="rounded-circle ms-2" style="width: 40px; height: 40px;">
                </div>
                }
                else
                {
                <div class="d-flex justify-content-start mb-2">
                    <img src="/images/avatar-assistente.png" alt="Assistente de Ensino" class="rounded-circle me-2" style="width: 40px; height: 40px;">
                    <div class="message-ai bg-light p-2 rounded">
                        @((MarkupString)_markdownService.ConvertToHtml(message.Text))
                    </div>
                </div>
                }
                }
            </div>

            <div>
                <textarea class="form-control mb-2" placeholder="Escreva sua pergunta da forma mais clara possível." rows="3" @bind="UserMessage" disabled="@isProcessingMessage"></textarea>
                <button class="btn btn-primary w-100" type="button" @onclick="SendMessage" disabled="@isProcessingMessage">
                    @if (isProcessingMessage)
                    {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Processando...</span>
                    }
                    else
                    {
                    <span>Enviar</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Slug { get; set; }
    
    // private Video video;
    private string UserMessage { get; set; }
    private List<Message> Messages { get; set; } = new List<Message>();
    private bool isLoading = true;
    private bool isProcessingMessage = false;
    private User user;
    private string textoBoasVindas;
    private bool isWelcomeMessageSent = false; 
    
    protected override async Task OnParametersSetAsync()
    {
        // video = await _videoRepository.GetBySlugAsync(Slug);
        
        user = ParameterService.GetParameter<User>("user");
        
        if (!isWelcomeMessageSent)
        {
            Messages.Add(new Message { Text = $"Olá {user.Nome}, Seja bem-vindo! Sou o entrevistador para a vaga " +
                                              $"XPTO, vamos começar?!", IsUser = false });
            isWelcomeMessageSent = true;
        }

        isLoading = false;
    }
    
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(UserMessage))
        {
            isProcessingMessage = true;
            StateHasChanged();

            Messages.Add(new Message { Text = UserMessage, IsUser = true });

            var resposta = await _OllamaService.ProcessarPergunta(Messages);
            Messages.Add(new Message { Text = resposta, IsUser = false });

            UserMessage = string.Empty;
            isProcessingMessage = false;
            StateHasChanged();
        }
    }
}