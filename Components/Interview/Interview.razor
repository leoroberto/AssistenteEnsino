@page "/interview"
@rendermode InteractiveServer

@using AssistenteDeEnsino.Components.Interview.Entities
@using AssistenteDeEnsino.Data
@using AssistenteDeEnsino.Services.Markdown
@using AssistenteDeEnsino.Services.Ollama

@inject ParameterService ParameterService
@inject IMarkdownService _markdownService
@inject IOllamaService _OllamaService
@inject AppDbContext DbContext
@inject NavigationManager Navigation

<style>
    body {
        background: linear-gradient(to bottom, #6A95FF, #8CE5C3);
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .container-custom {
        width: 90%;
        max-width: 1200px;
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        padding: 20px;
        display: flex;
        flex-direction: column;
        height: 90vh;
    }

    .chat-history {
        flex-grow: 1;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 15px;
        overflow-y: auto;
        background-color: #F9F9F9;
    }

    .message-user {
        max-width: 70%;
        background-color: #6A95FF;
        color: white;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
        align-self: flex-end;
    }

    .message-ai {
        max-width: 70%;
        background-color: #E9E9E9;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
        align-self: flex-start;
    }

    .message-row {
        display: flex;
        align-items: center;
    }

    .message-row img {
        border-radius: 50%;
        width: 40px;
        height: 40px;
        margin: 5px;
    }

    .input-area {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .form-control {
        border: none;
        border-bottom: 2px solid #6A95FF;
        font-size: 1rem;
        padding: 10px;
        outline: none;
        transition: border-color 0.3s;
    }

    .form-control:focus {
        border-color: #4A90E2;
    }

    .btn-primary {
        background-color: #6A95FF;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-primary:hover {
        background-color: #4A90E2;
    }

    .btn-primary:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }
</style>

<div class="container-custom">
    <div class="chat-history">
        @foreach (var message in Messages)
        {
            if (message.Role == MessageType.User)
            {
                <div class="message-row justify-content-end">
                    <div class="message-user">
                        @((MarkupString)_markdownService.ConvertToHtml(message.Text))
                    </div>
                    <img src="/images/avatar-user.png" alt="Você">
                </div>
            }
            else
            {
                <div class="message-row justify-content-start">
                    <img src="/images/avatar-assistente.png" alt="Assistente de Ensino">
                    <div class="message-ai">
                        @((MarkupString)_markdownService.ConvertToHtml(message.Text))
                    </div>
                </div>
            }
        }
    </div>

    <div class="input-area mt-3">
        <textarea class="form-control" placeholder="Escreva sua pergunta da forma mais clara possível." rows="3" @bind="UserMessage" disabled="@isProcessingMessage"></textarea>
        <button class="btn-primary" type="button" @onclick="SendMessage" disabled="@isProcessingMessage">
            @if (isProcessingMessage)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Processando...</span>
            }
            else
            {
                <span>Enviar</span>
            }
        </button>
    </div>
</div>

@code {
    [Parameter]
    public string Slug { get; set; }
    
    // private Video video;
    private string UserMessage { get; set; }
    private List<Message> Messages { get; set; } = new List<Message>();
    private List<Message> MessagesIA { get; set; } = new List<Message>();
    private bool isLoading = true;
    private bool isProcessingMessage = false;
    private User user;
    private string textoBoasVindas;
    private bool isWelcomeMessageSent = false; 
    
    protected override async Task OnParametersSetAsync()
    {
        // video = await _videoRepository.GetBySlugAsync(Slug);
        
        user = ParameterService.GetParameter<User>("user");
        
        if (!isWelcomeMessageSent)
        {
            Messages.Add(new Message { Text = $"Olá {user.Nome}, Seja bem-vindo! Sou o entrevistador para a vaga " +
                                              $"Agile Coach, vamos começar?!", Role = MessageType.Assistant});
            MessagesIA.Add(new Message {Text = "Quero que atue como um recrutador de uma grande empresa de tecnologia como a BRQ Digital Solutions e sua função é me entrevistar para uma vaga específica descrita abaixo.\n\nInstruções para a entrevista: Faça as perguntas que um recrutador faria. No total faça 3 perguntas. A entrevista deve ser realizada em português. Faça as perguntas uma a uma, ou seja, faça a primeira e aguarde minha resposta (não precisa informar que está aguardando a resposta), faça a segunda e assim sucessivamente até a última. Em hipótese alguma forneça comentário informando que serão calculadas, avaliadas notas ou que as respostas tem algum impacto na avaliação. Em hipótese alguma comente sobre as respostas e sobre o resultado final. Ao final da entrevista, quero que me de uma nota de 0 a 100 de acordo com as minhas respostas (seja rigoroso nessa avaliação como um recrutador seria), informe apenas a nota precedida da palavra 'ResultadoFinalOK:'. Não faça nenhum comentário, apenas informe a nota.\n\nDescrição da vaga:\n\nO que procuramos?\nBuscamos um #fera com espírito empreendedor e que sabe que é o verdadeiro protagonista do seu sucesso! Queremos em nosso time pessoas motivadas por desafios, constante evolução e, claro, que são apaixonadas por tecnologia e transformação!\n\nResponsabilidades:\n\tColaborar na identificação e padronização de métricas alinhadas aos objetivos de negócios.\n\tDesenvolver KPIs para monitorar a eficiência e qualidade das entregas.\n\tConfigurar e integrar ferramentas para facilitar a análise e visualização de dados.\n\tAutomatizar a captura de métricas e criar dashboards personalizados.\n\tIdentificar padrões e tendências nos dados coletados.\n\tRealizar benchmarking entre equipes e propor ações corretivas.\n\tUtilizar métricas nas retrospectivas para promover melhorias contínuas.\n\tApoiar na criação de OKRs baseados em métricas relevantes.\n\tTreinar equipes sobre métricas e promover uma cultura de dados.\n\tRevisar as métricas periodicamente para garantir sua relevância.\n\tMonitorar métricas de dependências entre squads.\n\tFacilitar workshops para alinhar estratégias e promover sinergia.\n\nQualificações:\n\tExperiência em definição e análise de métricas em ambientes ágeis.\n\tConhecimento de ferramentas como Jira, Azure DevOps, Tableau ou Power BI.\n\tHabilidade em comunicação e facilitação entre equipes.", Role = MessageType.System});
            
            isWelcomeMessageSent = true;
        }

        isLoading = false;
    }
    
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(UserMessage))
        {
            isProcessingMessage = true;
            StateHasChanged();

            Messages.Add(new Message { Text = UserMessage, Role = MessageType.User});
            MessagesIA.Add(new Message { Text = UserMessage, Role = MessageType.User });

            var resposta = await _OllamaService.ProcessarPergunta(MessagesIA);

            if (!resposta.Contains("ResultadoFinalOK"))
            {
                Messages.Add(new Message { Text = resposta, Role = MessageType.Assistant });
                MessagesIA.Add(new Message { Text = resposta, Role = MessageType.Assistant });
            }
            else
            {
                string[] parts = resposta.Split(':');
                Nota nota = new Nota();
                nota.Valor = int.Parse(parts[1]);

                user.Nota = nota;
                
                DbContext.Users.Update(user);
                await DbContext.SaveChangesAsync();
                Navigation.NavigateTo("/resultado");
            }

            UserMessage = string.Empty;
            isProcessingMessage = false;
            StateHasChanged();
        }
    }
}